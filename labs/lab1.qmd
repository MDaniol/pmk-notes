# Laboratorium 1

## Zakres Tematyczny

1. Wprowadzenie w temat obliczeń numerycznych w języku Python
2. Podstawy Pythona - Przypomnienie
3. Podstawy użycia bibliotek:
   1. Numpy
   2. SciPy
   3. MatPlotLib
4. Typy Danych w Numpy
5. Błędy numeryczne i ich propagacja
6. Biblioteka PyTorch

## Obliczenia numeryczne w języku Python

Obliczenia numeryczne odgrywają kluczową rolę w wielu dziedzinach nauki i inżynierii. Python, dzięki swoim bibliotekom i cechom języka, stał się popularnym wyborem do przeprowadzania obliczeń numerycznych. Oto kilka powodów, dla których Python jest często wybierany do tego celu:

**Czytelność:** Składnia Pythona jest przejrzysta i zwięzła, co pozwala na łatwe pisanie i analizę kodu.

**Biblioteki**: Python posiada bogaty zestaw bibliotek do obliczeń numerycznych, takich jak:

- NumPy: Biblioteka do obliczeń numerycznych, oferująca wsparcie dla dużych tablic i macierzy wielowymiarowych oraz zestaw funkcji matematycznych do ich operowania.
- SciPy: Oparta na NumPy, jest to biblioteka służąca do bardziej zaawansowanych obliczeń i algorytmów naukowych.
- Pandas: Biblioteka do analizy danych, która dostarcza struktury danych i funkcje niezbędne do czyszczenia, agregacji i analizy danych.

**Interaktywność**: Narzędzia takie jak Jupyter Notebook pozwalają na interaktywne eksplorowanie danych i obliczeń, co jest niezmiernie użyteczne w analizie naukowej.

**Integracja z innymi językami:** Python może być łatwo zintegrowany z kodem napisanym w językach takich jak C, C++ czy Fortran, co pozwala na łączenie szybkości tych języków z elastycznością Pythona.

**Wizualizacja Danych**: Biblioteki takie jak Matplotlib, Seaborn czy Plotly umożliwiają tworzenie zaawansowanych wizualizacji, które są kluczowe do analizy wyników obliczeń numerycznych.

**Wspólnota**: Python ma ogromną społeczność, która stale tworzy i udostępnia nowe narzędzia, biblioteki i zasoby do obliczeń numerycznych.

**Wszechstronność:** Poza obliczeniami numerycznymi, Python jest językiem ogólnego zastosowania, co oznacza, że można go używać również do web developmentu, automatyki, analizy danych, sztucznej inteligencji i wielu innych zastosowań. Dzięki temu badacze i inżynierowie mogą korzystać z jednego języka do wielu różnych zadań.

**Otwarte oprogramowanie**: Python jest językiem open source, co oznacza, że jest dostępny za darmo i ma dużą społeczność deweloperów pracujących nad jego rozwojem.

## Podstawy Pythona


### Czym jest Python i jak działa

Python to wysokopoziomowy język programowania stworzony przez Guido van Rossuma i po raz pierwszy opublikowany w 1991 roku. Charakteryzuje się czytelną składnią, która pozwala programistom wyrażać koncepty w mniejszej ilości kodu niż w językach takich jak C++ czy Java.

Działanie Pythona na poziomie szczegółów można opisać w kilku kluczowych krokach. W skrócie, działanie Pythona polega na tym, że kod źródłowy jest interpretowany przez interpreter Pythona w kod bajtowy, który następnie jest wykonywany przez maszynę wirtualną Pythona.

Oto bardziej szczegółowy przegląd tego, jak to działa:

1. **Kod źródłowy**: Wszystko zaczyna się od kodu źródłowego, który piszesz w pliku .py.

2. **Kompilacja do kodu bajtowego:** Gdy uruchamiasz skrypt Pythona, interpreter (zazwyczaj CPython, który jest standardową implementacją Pythona) kompiluje ten kod źródłowy w kod bajtowy. Kod bajtowy to niskopoziomowe, platformowo niezależne przedstawienie twojego kodu źródłowego. Zostaje on zapisany w plikach .pyc w katalogu __pycache__.

3. **Maszyna wirtualna Pythona (PVM):** Po skompilowaniu kodu, kod bajtowy jest przekazywany do Maszyny Wirtualnej Pythona (PVM). To tu właściwe wykonanie kodu ma miejsce. PVM interpretuje i wykonuje kod bajtowy linia po linii.

4. **Zarządzanie pamięcią:** Python automatycznie zarządza pamięcią dzięki mechanizmowi zwanej "garbage collection". Python posiada wbudowany licznik odniesień, który śledzi liczbę odniesień do każdego obiektu w pamięci. Gdy liczba odniesień do obiektu spada do zera, pamięć zajmowana przez obiekt jest automatycznie zwalniana. Dodatkowo, cykliczne odniesienia (gdzie obiekty odnoszą się nawzajem, ale nie są dostępne z żadnej innej części kodu) są wykrywane przez garbage collector i odpowiednio czyszczone.

5. **Rozszerzenia w języku C:** Jednym z mocnych stron Pythona jest jego zdolność do integrowania się z językami niższego poziomu, takimi jak C. Możesz pisać rozszerzenia w C, które są potem dostępne jako moduły w Pythonie. To pozwala na pisania bardziej wydajnych fragmentów kodu w C i korzystania z nich w Pythonie.

6. **Biblioteki standardowe:** Python ma bogate biblioteki standardowe, które oferują funkcje dla wielu powszechnych zadań, od pracy z plikami i sieciami po analizę danych i tworzenie interfejsów graficznych.

7. **Interfejs API C:** Python ma dobrze zdefiniowany API dla języka C, co pozwala na tworzenie rozszerzeń w C oraz na osadzanie interpretera Pythona w aplikacjach napisanych w C.

### Funkcje i przekazywanie argumentów
W języku Python najprostsza deklaracja funkcji wygląda następująco:

```python
def my_first_function():
    pass
```

Funkcja ta nie przyjmuje ani nie zwraca niczego.

Funkcje mogą przyjmowac argumenty:

**Argumenty pozycyjne:** Są to najczęściej używane argumenty. Przekazujesz je w kolejności, w jakiej są wymienione w definicji funkcji.

\

```python
def funkcja(a, b, c):
    print(a, b, c)

funkcja(1, 2, 3)  # 1 2 3
```

\

**Argumenty nazwane** (keyword arguments): Przekazujemy wartość, wskazując nazwę argumentu.

```python
funkcja(a=1, c=3, b=2)  # 1 2 3
```

\

**Domyślne wartości argumentów**: Możesz ustawić domyślne wartości dla niektórych (lub wszystkich) argumentów.

\

```python
def funkcja(a, b=2, c=3):
    print(a, b, c)

funkcja(1)  # 1 2 3
funkcja(1, c=4)  # 1 2 4
```

### Pętle

## Wybrane biblioteki numeryczne Pythona

### Biblioteka Numpy

Biblioteka Numpy to **najważniejsza** biblioteka do obliczeń numerycznych w języku Python i jedna z najbardziej popularnych bibliotek ogółem. 

### Biblioteka Scipy

### Biblioteka MatPlotLib

## Typy danych

## Błędy numeryczne i ich propagacja

Rozpocznijmy od dwóch definicji:

- **Sygnał Analogowy:** - Sygnał w postaci wielkości fizycznej zmieniającej się w sposób ciągły, a nie skokowo. Jego wartości mogą zostać określone w każdej chwili. 

- **Sygnał Cyfrowy:** - Przeciwieństwem sygnału analogowego jest sygnał skwantowany, nazywany również dyskretnym. Kwantyzacja to działanie, które sygnał analogowy (liczbę rzeczywistą, o nieskończonym liczbie wartości w danym przedziale) przekształca w ograniczony zbiór liczb całkowitych, dzięki czemu możliwa jest dalsza obróbka tego sygnału przy pomocy komputera

::: {.callout-tip}
## Przykład kwantyzacji

Przykładem niech będzie sygnał EKG na obrazku poniżej

![EKG](images/lab1_probkowanie.png)

:::

Konwersja sygnału analogowego do cyfrowego zachodzi zawsze z pewną **ograniczoną dokładnością**. 
Dokładnoś ta wynika ze skończonej precyzji reprezentacji liczb w systemach cyfrowych. Wiąże się to bezpośrednio z typami danych. Drugim typem błędu, który nas interesuje to błąd maszynowy. 

Błąd kwantyzacji: Pojawia się, gdy sygnał ciągły lub sygnał o dużej rozdzielczości jest przetwarzany do ograniczonej liczby dyskretnych poziomów. Na przykład, gdy analogowy sygnał dźwiękowy jest digitalizowany, jego wartości amplitudy są zaokrąglane do najbliższego poziomu kwantyzacji. Błąd kwantyzacji odnosi się do różnicy między rzeczywistą wartością sygnału a jego kwantyzowaną wartością.

Błąd maszynowy: Jest to najmniejsza wartość, która może być reprezentowana w danym systemie numerycznym. Dla standardu liczby zmiennoprzecinkowej IEEE 754 (często używany w komputerach), błąd maszynowy określa minimalną różnicę między "1" a następną wartością, która może być reprezentowana. Błąd maszynowy jest ograniczeniem maszynowym i jest bezpośrednio związany z precyzją, z jaką liczby są reprezentowane w komputerze.

Błędy maszynowe są nieuniknione w obliczeniach numerycznych ze względu na skończoną precyzję reprezentacji liczb w systemach cyfrowych. Sygnał analogowy 

W kontekście arytmetyki zmiennoprzecinkowej, błędy te wynikają z faktu, że wiele liczb rzeczywistych nie może być dokładnie przedstawionych w systemie binarnym o skończonej długości.

Epsilon maszynowy to najmniejsza liczba taka, że 1+epsilon≠11+epsilon=1 w arytmetyce zmiennopozycyjnej komputera. Dla typu float64 w bibliotece numpy (co jest standardowym formatem liczby zmiennopozycyjnej o podwójnej precyzji), epsilon maszynowy wynosi około 2−522−52 czyli około 2.220446049250313×10−162.220446049250313×10−16.

Można go łatwo uzyskać w numpy za pomocą funkcji finfo. Oto jak to zrobić:

### Zadania 

#### Zadanie 1 - Kalkulator Oszczędnościowy
Twoim zadaniem jest stworzenie prostego kalkulatora oszczędnościowego, który pomoże użytkownikowi przewidzieć, ile pieniędzy uda mu się zaoszczędzić w ciągu określonego czasu.

**Wymagania:**

1. Użytkownik powinien mieć możliwość podania początkowej kwoty oszczędności (może to być 0).
2. Użytkownik powinien podać miesięczną kwotę, którą planuje oszczędzać.
3. Użytkownik powinien podać roczne oprocentowanie swojego konta oszczędnościowego (np. 3% oznaczać będzie 0.03).
4. Użytkownik powinien podać liczbę lat, przez które planuje oszczędzać.

**Twoim zadaniem jest:**

1. Obliczenie końcowej sumy oszczędności po określonym czasie, uwzględniając oprocentowanie.
2. Wykorzystanie odpowiednich typów danych w Pythonie do reprezentowania tych wartości (np. float dla kwot i oprocentowania, int dla liczby lat).

**Formuła oszczędności z oprocentowaniem składanym miesięcznie:**

$$A = P \left(1 + \frac{r}{n}\right)^{nt} + PMT \left[ \frac{\left(1 + \frac{r}{n}\right)^{nt} - 1}{\frac{r}{n}} \right]$$

Gdzie:

- A to końcowa suma oszczędności.
- P to początkowa suma oszczędności.
- r to roczna stopa procentowa (jako ułamek, np. 3% to 0.03).
- n to liczba okresów kapitalizacji w ciągu roku (dla kapitalizacji miesięcznej n=12n=12).
- t to liczba lat oszczędzania.
- PMT to stała miesięczna wpłata.



## Podstawy użycia bibliotek

### Numpy
### SciPy
### MatPlotLib

## Błędy numeryczne i ich propagacja

## Biblioteka Pytorch
